{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n  //checks if item exist in localStorage if it doesn't default is epmty array\n  cartTotalQuantity: 0,\n  cartTotalAmount: 0,\n  emptyBasket: []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      const existingIndex = state.cartItems.findIndex(\n      //findIndex checks if we already have that item\n      item => item.id === action.payload.id //checks if item in the cart exists\n      );\n\n      if (existingIndex >= 0) {\n        //means item is in the cart\n        state.cartItems[existingIndex] = {\n          //item in the cart\n          ...state.cartItems[existingIndex],\n          //spread of the item\n          cartQuantity: state.cartItems[existingIndex].cartQuantity + 1 //increases quantity by one\n        };\n\n        toast.info(`${action.payload.name} increased cart quantity`, {\n          position: \"bottom-left\"\n        });\n      } else {\n        let tempProductItem = {\n          ...action.payload,\n          cartQuantity: 1\n        }; //adds to carts with the quantity equal to 1\n        state.cartItems.push(tempProductItem); //adds item to cart\n        toast.success(`${action.payload.name} added to cart`, {\n          position: \"bottom-left\"\n        });\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems)); //adds item to localStorage & converts js to json string with key\n    },\n\n    removeFromCart(state, action) {\n      const nextCartItems = state.cartItems.filter(cartItem => cartItem.id !== action.payload.id //comparing to see if item is the same, return array without action.payload.id\n      );\n\n      state.cartItems = nextCartItems; //removes item from cart\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems)); //new array of items\n\n      toast.error(`${action.payload.name} removed from cart`, {\n        position: \"bottom-left\"\n      });\n    },\n    decreaseCart(state, action) {\n      const itemIndex = state.cartItems.findIndex(cartItem => cartItem.id === action.payload.id //check if id are the same to get itemIndex\n      );\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n        toast.info(`Decreased ${action.payload.name} cart quantity`, {\n          position: \"bottom-left\"\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(cartItem => cartItem.id !== action.payload.id //this removes the item if one is left\n        );\n\n        state.cartItems = nextCartItems;\n        toast.error(`${action.payload.name} removed from cart`, {\n          position: \"bottom-left\"\n        });\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    clearCart(state, action) {\n      state.cartItems = []; //bring back an empty cart\n      toast.error(`Cart Cleared`, {\n        position: \"bottom-left\"\n      });\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    getTotals(state, action) {\n      let {\n        total,\n        quantity\n      } = state.cartItems.reduce(\n      //first para is an acummulator\n      (cartTotal, cartItem) => {\n        const {\n          price,\n          cartQuantity\n        } = cartItem; //destructioning from cartItem\n        const itemTotal = price * cartQuantity; //item total\n\n        cartTotal.total += itemTotal; //storing itemTotal in cartTotal total in total\n        cartTotal.quantity += cartQuantity; //this would give the total cart quantity\n\n        // console.log(cartTotal)\n\n        return cartTotal;\n      }, {\n        total: 0,\n        quantity: 0 //would be total cart quantity\n      });\n\n      state.cartTotalAmount = total;\n      state.cartTotalQuantity = quantity;\n    }\n    // getNames(state, action){\n    //   // const existingIndex = state.cartItems.findIndex(//findIndex checks if we already have that item\n    //   //   (item) => item.id === action.payload.id//checks if item in the cart exists\n    //   // );\n\n    //   // console.log(existingIndex.push(\"hello\"))\n\n    //   console.log(\"hello\")\n\n    //   toast.success(`${action.payload.name} removed from cart`, {\n    //     position: \"bottom-left\",\n    //   });\n    // },\n  }\n});\n\nexport const {\n  addToCart,\n  removeFromCart,\n  decreaseCart,\n  clearCart,\n  getTotals\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","toast","initialState","cartItems","localStorage","getItem","JSON","parse","cartTotalQuantity","cartTotalAmount","emptyBasket","cartSlice","name","reducers","addToCart","state","action","existingIndex","findIndex","item","id","payload","cartQuantity","info","position","tempProductItem","push","success","setItem","stringify","removeFromCart","nextCartItems","filter","cartItem","error","decreaseCart","itemIndex","clearCart","getTotals","total","quantity","reduce","cartTotal","price","itemTotal","actions","reducer"],"sources":["/Users/hafizalimi/Projects/React/Online-Shop/client/src/features/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport { toast } from \"react-toastify\"\n\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\") \n  ? JSON.parse(localStorage.getItem(\"cartItems\")) \n  : [],//checks if item exist in localStorage if it doesn't default is epmty array\n  cartTotalQuantity: 0,\n  cartTotalAmount: 0,\n  emptyBasket: []\n}\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      const existingIndex = state.cartItems.findIndex(//findIndex checks if we already have that item\n        (item) => item.id === action.payload.id//checks if item in the cart exists\n      );\n\n      if (existingIndex >= 0) {//means item is in the cart\n        state.cartItems[existingIndex] = {//item in the cart\n          ...state.cartItems[existingIndex],//spread of the item\n          cartQuantity: state.cartItems[existingIndex].cartQuantity + 1,//increases quantity by one\n        };\n        toast.info(`${action.payload.name} increased cart quantity`, {\n          position: \"bottom-left\",\n        });\n      } else {\n        let tempProductItem = { ...action.payload, cartQuantity: 1 };//adds to carts with the quantity equal to 1\n        state.cartItems.push(tempProductItem);//adds item to cart\n        toast.success(`${action.payload.name} added to cart`, {\n          position: \"bottom-left\",\n        });\n        }\n\n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems))//adds item to localStorage & converts js to json string with key\n    },\n    removeFromCart(state, action){\n      const nextCartItems = state.cartItems.filter(\n        cartItem => cartItem.id !== action.payload.id//comparing to see if item is the same, return array without action.payload.id\n      )\n\n      state.cartItems = nextCartItems;//removes item from cart\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));//new array of items\n\n      toast.error(`${action.payload.name} removed from cart`, {\n        position: \"bottom-left\",\n      });\n    },\n    decreaseCart(state, action) {\n      const itemIndex = state.cartItems.findIndex(\n       cartItem => cartItem.id === action.payload.id//check if id are the same to get itemIndex\n      ) \n\n      if(state.cartItems[itemIndex].cartQuantity > 1){\n        state.cartItems[itemIndex].cartQuantity -= 1\n\n        toast.info(`Decreased ${action.payload.name} cart quantity`, {\n          position: \"bottom-left\",\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1){\n        const nextCartItems = state.cartItems.filter(\n          cartItem => cartItem.id !== action.payload.id//this removes the item if one is left\n        );\n\n        state.cartItems = nextCartItems\n\n        toast.error(`${action.payload.name} removed from cart`, {\n        position: \"bottom-left\",\n      });\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n\n    },\n    clearCart(state, action) {\n      state.cartItems = [];//bring back an empty cart\n      toast.error(`Cart Cleared`, {\n        position: \"bottom-left\",\n    });\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    getTotals(state, action) {\n     let {total, quantity } =  state.cartItems.reduce(//first para is an acummulator\n        (cartTotal, cartItem) => {\n        const { price, cartQuantity } = cartItem;//destructioning from cartItem\n        const itemTotal = price * cartQuantity;//item total\n\n        cartTotal.total += itemTotal;//storing itemTotal in cartTotal total in total\n        cartTotal.quantity += cartQuantity;//this would give the total cart quantity\n\n        // console.log(cartTotal)\n\n        return cartTotal;\n      }, \n      {\n        total: 0,\n        quantity: 0,//would be total cart quantity\n      }\n     );\n\n     state.cartTotalAmount = total;\n     state.cartTotalQuantity = quantity;\n     \n    },\n    // getNames(state, action){\n    //   // const existingIndex = state.cartItems.findIndex(//findIndex checks if we already have that item\n    //   //   (item) => item.id === action.payload.id//checks if item in the cart exists\n    //   // );\n\n    //   // console.log(existingIndex.push(\"hello\"))\n\n    //   console.log(\"hello\")\n\n    //   toast.success(`${action.payload.name} removed from cart`, {\n    //     position: \"bottom-left\",\n    //   });\n    // },\n  },\n});\n\nexport const {addToCart, removeFromCart, decreaseCart, clearCart, getTotals} = cartSlice.actions;\n\nexport default cartSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}